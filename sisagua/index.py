"""
sss
"""
from dash import State

from .navbar.topbar import *
from .sidebar.sidebar_module import *

from .content.content import *
from .content.page_cadastro import *
from .content.page_controle import *
from .content.page_vigilancia import *
from .content.page_home import home_page

from .data.data import *
from .data.basic_parameters import *
from .data.graphs import graph_no_data, graph_vig_basic, graph_error_query

# Aplication
app = Dash(
    __name__,
    external_stylesheets=[
        url_theme1,
        url_theme2,
        'https://cdn.jsdelivr.net/gh/AnnMarieW/dash-bootstrap-templates/dbc.min.css'
    ],
    title='Siságua',
)

# Mensagem de Erro
"""
If you are assigning callbacks to components that are
generated by other callbacks (and therefore not in the
initial layout), you can suppress this exception by setting
`suppress_callback_exceptions=True`.
"""
app.config.suppress_callback_exceptions = True

# App
app.layout = html.Div(
    [
        navbar,
        dcc.Location(id='id_url'),
        sidebar,
        content,

        # dcc.Store stores the intermediate value
        dcc.Store(id='id_vig_basic_data_json'),
        dcc.Store(id='id_vig_other_data_json'),
        dcc.Store(id='id_con_basic_data_json'),
    ]
)


load_figure_template('LUX')

# Initial Data
df_mun = get_municipios()
id_ibge = None
forma_abastecimento_tipo = None
forma_abastecimento_nome = None

@app.callback(
    Output(component_id='id_page_content', component_property='children'),
    Output(component_id='id_add_fields', component_property='children'),
    Output(component_id='id_municipio', component_property='options'),
    Input(component_id='id_url', component_property='pathname')
)
def render_pages(pathname):
    """

    :rtype: object
    :param pathname:
    :return:
    """
    print(pathname)
    if pathname == '/':
        my_content = home_page
        add_fields = None
        list_municipios = get_cadastro_municipios_municipios(df_mun)
        return my_content, add_fields, list_municipios

    if pathname == '/cadastro_captacoes':
        my_content = cad_captacao_page
        add_fields = None
        list_municipios = get_cadastro_municipios_municipios(df_mun)
        return my_content, add_fields, list_municipios

    if pathname == '/cadastro_populacao':
        my_content = cad_populacao_page
        add_fields = None
        list_municipios = get_cadastro_municipios_municipios(df_mun)
        return my_content, add_fields, list_municipios

    if pathname == '/cadastro_tratamento':
        my_content = cad_tratamento_page
        add_fields = None
        list_municipios = get_cadastro_municipios_municipios(df_mun)
        return my_content, add_fields, list_municipios

    if pathname == '/vig_param_basicos':
        my_content = vig_basic_page

        add_fields = html.Div(
            [
                html.Div(
                    [
                        html.Hr(style={'margin-top': '30px'}),
                        dbc.Label('Forma de Abastecimento'),
                        dbc.Select(
                            id='id_vig_basic_forma_abastecimento',
                            options=[],
                            placeholder='Selecione o Forma',
                        ),
                    ],
                ),
                html.Div(
                    [
                        html.Hr(style={'margin-top': '30px'}),
                        dbc.Label('Parâmetros'),
                        dbc.Select(
                            id='id_vig_basic_param',
                            options=[],
                            placeholder='Selecione Parâmetro',
                        ),
                    ]
                )
            ]
        ),

        list_municipios = get_cadastro_municipios_municipios(df_mun)
        return my_content, add_fields, list_municipios

    if pathname == '/vig_param_outros':
        my_content = vig_other_page
        add_fields = html.Div(
            [
                html.Div(
                    [
                        html.Hr(style={'margin-top': '30px'}),
                        dbc.Label('Forma de Abastecimento'),
                        dbc.Select(
                            id='id_vig_other_forma_abastecimento',
                            options=[],
                            placeholder='Selecione o Forma',
                        ),
                    ],
                ),
                html.Div(
                    [
                        html.Hr(style={'margin-top': '30px'}),
                        dbc.Label('Parâmetros'),
                        dbc.Select(
                            id='id_vig_other_param',
                            options=[],
                            placeholder='Selecione Parâmetro',
                        ),
                    ]
                )
            ]
        ),
        list_municipios = get_vig_other_parameters_municipio()
        return my_content, add_fields, list_municipios

    if pathname == '/vig_ciano':
        my_content = vig_ciano_page
        add_fields = None
        list_municipios = get_cadastro_municipios_municipios(df_mun)
        return my_content, add_fields, list_municipios

    if pathname == '/controle_param_basicos':
        my_content = controle_parameters_basic

        add_fields = html.Div(
            [
                html.Div(
                    [
                        html.Hr(style={'margin-top': '30px'}),
                        dbc.Label('Forma de Abastecimento'),
                        dbc.Select(
                            id='id_con_basic_forma_abastecimento',
                            options=[],
                            placeholder='Selecione o Forma',
                        ),
                    ],
                ),
                html.Div(
                    [
                        html.Hr(style={'margin-top': '30px'}),
                        dbc.Label('Parâmetros'),
                        dbc.Select(
                            id='id_con_basic_param',
                            options=[],
                            placeholder='Selecione Parâmetro',
                        ),
                    ]
                )
            ]
        ),

        list_municipios = get_cadastro_municipios_municipios(df_mun)
        return my_content, add_fields, list_municipios

    if pathname == '/controle_param_outros':
        my_content = con_other_page
        add_fields = None
        list_municipios = get_cadastro_municipios_municipios(df_mun)
        return my_content, add_fields, list_municipios

    if pathname == '/controle_infra':
        my_content = con_infra_page
        add_fields = None
        list_municipios = get_cadastro_municipios_municipios(df_mun)
        return my_content, add_fields, list_municipios

    if pathname == '/controle_param_fora':
        my_content = con_fora_padrao_page
        add_fields = None
        list_municipios = get_cadastro_municipios_municipios(df_mun)
        return my_content, add_fields, list_municipios

    if pathname == '/controle_semestral':
        my_content = con_semestral_page
        add_fields = None
        list_municipios = get_cadastro_municipios_municipios(df_mun)
        return my_content, add_fields, list_municipios

    # If the user tries to reach a different page, return a 404 message
    my_content = html.Div(
        dbc.Container(
            [
                html.H1('404: Not found', className='text-danger'),
                html.Hr(),
                html.P(f'The pathname {pathname} was not recognised...'),
            ],
            fluid=True,
            className='py-3',
        ),
        className='p-3 bg-light rounded-3',
    )
    add_fields = None
    list_municipios = get_cadastro_municipios_municipios(df_mun)
    return my_content, add_fields, list_municipios


@app.callback(
    Output(component_id='id_cad_tipo_abastecimento', component_property='options'),
    Input(component_id='id_municipio', component_property='value'),
    prevent_initial_call=True,
)
def cad_get_forma_abastecimento_tipo(id_ibge):
    """

    :param id_ibge:
    :return:
    :rtype: object
    """

    # TODO: 33333
    if id_ibge is None:
        # PreventUpdate prevents ALL outputs updating
        raise dash.exceptions.PreventUpdate


    # Query
    sql = f'''
        SELECT DISTINCT "forma_abastecimento_tipo" FROM "{USERNAME}/{REPO}"."cadastro_formas_instituicoes"
        WHERE "id_ibge" = {id_ibge};
    '''
    # print(sql)

    # Execute
    with engine.connect() as conn:
        conn.execution_options(autocommit=True)
        query = conn.execute(text(sql), {'id_ibge': id_ibge})

    # Dataframe
    df = pd.DataFrame(query.fetchall())
    # print(df.head())
    tipo_abastecimento_html = [
        {
            'label': row['forma_abastecimento_tipo'],
            'value': row['forma_abastecimento_tipo']
        } for i, row in df.iterrows()
    ]
    return tipo_abastecimento_html


@app.callback(
    Output(component_id='id_cad_forma_abastecimento', component_property='options'),
    Input(component_id='id_municipio', component_property='value'),
    Input(component_id='id_cad_tipo_abastecimento', component_property='value'),
    prevent_initial_call=True
)
def cad_get_forma_abastecimento_nome(id_ibge, forma_abastecimento_tipo):
    if id_ibge is None or forma_abastecimento_tipo is None:
        # PreventUpdate prevents ALL outputs updating
        raise dash.exceptions.PreventUpdate

    # Query
    sql = f'''
        SELECT DISTINCT "forma_abastecimento_nome" FROM "{USERNAME}/{REPO}"."cadastro_formas_instituicoes"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}';
    '''
    # print(sql)

    # Execute
    with engine.connect() as conn:
        conn.execution_options(autocommit=True)
        query = conn.execute(text(sql), {
            'id_ibge': id_ibge,
            'forma_abastecimento_tipo': forma_abastecimento_tipo})

    # Dataframe
    df = pd.DataFrame(query.fetchall())
    # print(df.head())

    results = [
        {
            'label': row['forma_abastecimento_nome'],
            'value': row['forma_abastecimento_nome']
        } for i, row in df.iterrows()
    ]
    return results


def cad_get_captacoes(id_ibge):
    """
    Busca parâmetros da Vigilância Sanitária com base na tabela do python
    :param id_ibge:
    :return:
    :rtype: object
    """
    return 1


@app.callback(
    Output(component_id='id_vig_basic_param', component_property='options'),
    Input(component_id='id_municipio', component_property='value'),
    prevent_initial_call=True,
)
def vig_basic_get_param(id_ibge):
    """
    Busca parâmetros da Vigilância Sanitária com base na tabela do python
    :param id_ibge:
    :return:
    :rtype: object
    """
    print('vig_basic_get_param')
    id_param = [
        {
            'label': f"{row['parametro_descricao']} ({row['unidade']})",
            'value': row['parametro_campo']
        } for i, row in df_vig_basic_param.iterrows()
    ]
    return id_param


@app.callback(
    Output(component_id='id_vig_basic_forma_abastecimento', component_property='options'),
    [Input(component_id='id_municipio', component_property='value')],
    [Input(component_id='id_cad_tipo_abastecimento', component_property='value')],
    prevent_initial_call=True,
)
def vig_basic_get_forma_abastecimento_nome(id_ibge, forma_abastecimento_tipo):
    """

    :param id_ibge:
    :return:
    :rtype: object
    """
    print(f'Municipio e {id_ibge} e forma e {forma_abastecimento_tipo}')
    # Query
    sql = f'''
        SELECT "forma_abastecimento_nome" FROM "{USERNAME}/{REPO}"."vig_par_basico_bacterias"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}'
        UNION
        SELECT "forma_abastecimento_nome" FROM "{USERNAME}/{REPO}"."vig_par_basico_cloro_combinado"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}'
        UNION
        SELECT "forma_abastecimento_nome" FROM "{USERNAME}/{REPO}"."vig_par_basico_cloro_livre"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}'        
        UNION
        SELECT "forma_abastecimento_nome" FROM "{USERNAME}/{REPO}"."vig_par_basico_coliformes"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}'        
        UNION
        SELECT "forma_abastecimento_nome" FROM "{USERNAME}/{REPO}"."vig_par_basico_cor"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}'        
        UNION
        SELECT "forma_abastecimento_nome" FROM "{USERNAME}/{REPO}"."vig_par_basico_di_cloro"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}'        
        UNION
        SELECT "forma_abastecimento_nome" FROM "{USERNAME}/{REPO}"."vig_par_basico_e_coli"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}'        
        UNION
        SELECT "forma_abastecimento_nome" FROM "{USERNAME}/{REPO}"."vig_par_basico_fluor"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}'
        UNION
        SELECT "forma_abastecimento_nome" FROM "{USERNAME}/{REPO}"."vig_par_basico_turbidez"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}'
        UNION
        SELECT "forma_abastecimento_nome" FROM "{USERNAME}/{REPO}"."vig_par_basico_ph"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}';
    '''
    # print(sql)

    # Execute
    with engine.connect() as conn:
        conn.execution_options(autocommit=True)
        query = conn.execute(text(sql), {
            'id_ibge': id_ibge,
            'forma_abastecimento_tipo': forma_abastecimento_tipo
        })

    # Dataframe
    df = pd.DataFrame(query.fetchall())
    print(df.head())

    sss = [
        {
            'label': row['forma_abastecimento_nome'],
            'value': row['forma_abastecimento_nome']
        } for i, row in df.iterrows()
    ]
    return sss


@app.callback(
    Output(component_id='id_vig_basic_data_json', component_property='data'),
    Input(component_id='id_municipio', component_property='value'),
    Input(component_id='id_cad_tipo_abastecimento', component_property='value'),
    Input(component_id='id_vig_basic_forma_abastecimento', component_property='value'),
    Input(component_id='id_vig_basic_param', component_property='value'),
    prevent_initial_call=True
)
def vig_basic_get_amostras(
        id_ibge,
        forma_abastecimento_tipo,
        forma_abastecimento_nome,
        parametro,
):
    if forma_abastecimento_tipo is None or forma_abastecimento_nome is None or parametro is None:
        # PreventUpdate prevents ALL outputs updating
        #print('deu merda')
        raise dash.exceptions.PreventUpdate

    # Tabela
    dict_row = df_vig_basic_param[df_vig_basic_param['parametro_campo'] == parametro].to_dict('records')[0]
    TABLE = dict_row['tabela_db']

    # Query
    sql = f'''
        SELECT * FROM "{USERNAME}/{REPO}"."{TABLE}"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}'
        AND "forma_abastecimento_nome" = '{forma_abastecimento_nome}';
    '''
    #print(sql)

    # Execute
    with engine.connect() as conn:
        conn.execution_options(autocommit=True)
        query = conn.execute(text(sql), {
            'id_ibge': id_ibge,
            'forma_abastecimento_tipo': forma_abastecimento_tipo,
            'forma_abastecimento_nome': forma_abastecimento_nome,
        })

    # Dataframe
    df = pd.DataFrame(query.fetchall())
    #print(df)
    return df.to_json(date_format='iso', orient='split')


@app.callback(
    Output(component_id='id_vig_basic_graphic', component_property='figure'),
    Input(component_id='id_vig_basic_data_json', component_property='data'),
    Input(component_id='id_vig_basic_forma_abastecimento', component_property='value'),
    Input(component_id='id_vig_basic_param', component_property='value'),
)
def vig_basic_get_graph(datajson, forma_abastecimento_nome, parametro):
    # Prevent Update prevents ALL outputs updating
    if forma_abastecimento_nome is None or parametro is None:
        print('deu merda')
        raise dash.exceptions.PreventUpdate

    #
    dict_row = df_vig_basic_param[df_vig_basic_param['parametro_campo'] == parametro].to_dict('records')[0]
    parametro_desc = f"{dict_row['parametro_descricao']} ({dict_row['unidade']})"

    # Data
    df = pd.read_json(datajson, orient='split')
    print('graph')
    print(df.head())

    if len(df) == 0:
        return graph_no_data(
            parametro=dict_row['parametro_descricao'],
            forma_abastecimento_nome=forma_abastecimento_nome,
        )
    else:
        return graph_vig_basic(
            x=df['data_coleta'],
            y=df['resultado'],
            parametro=parametro_desc,
            forma_abastecimento_nome=forma_abastecimento_nome,
        )


@app.callback(
    Output(component_id='id_vig_other_param', component_property='options'),
    Input(component_id='id_municipio', component_property='value'),
    Input(component_id='id_cad_tipo_abastecimento', component_property='value'),
    Input(component_id='id_vig_other_forma_abastecimento', component_property='value'),
    prevent_initial_call=True
)
def vig_other_get_param(
        id_ibge,
        forma_abastecimento_tipo,
        forma_abastecimento_nome,
):
    if id_ibge is None or forma_abastecimento_tipo is None or forma_abastecimento_nome is None:
        # PreventUpdate prevents ALL outputs updating
        raise dash.exceptions.PreventUpdate

    # Query
    sql = f'''
        SELECT "parametro" FROM "{USERNAME}/{REPO}"."vig_demais_parametros"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}'
        AND "forma_abastecimento_nome" = '{forma_abastecimento_nome}';
    '''
    print(sql)

    # Execute
    with engine.connect() as conn:
        conn.execution_options(autocommit=True)
        query = conn.execute(text(sql), {
            'id_ibge': id_ibge,
            'forma_abastecimento_tipo': forma_abastecimento_tipo,
            'forma_abastecimento_nome': forma_abastecimento_nome,
        })
    df = pd.DataFrame(query.fetchall())
    print(df)
    if len(df) == 0:
        # TODO: Botar uma anotação mencionando haver zero amostras
        return [{'label': 'Sem Demais Parâmetros', 'value': 'Sem Demais Parâmetros'}]
    else:
        return [{'label': i, 'value': i} for i in list(set(df['parametro']))]


@app.callback(
    Output(component_id='id_vig_other_forma_abastecimento', component_property='options'),
    Input(component_id='id_municipio', component_property='value'),
    Input(component_id='id_cad_tipo_abastecimento', component_property='value'),
    prevent_initial_call=True,
)
def vig_other_get_forma_abastecimento_nome(id_ibge, forma_abastecimento_tipo):
    """

    :param id_ibge:
    :return:
    :rtype: object
    """
    if id_ibge is None or forma_abastecimento_tipo is None:
        # PreventUpdate prevents ALL outputs updating
        raise dash.exceptions.PreventUpdate

    # Query
    sql = f'''
        SELECT DISTINCT "forma_abastecimento_nome" FROM "{USERNAME}/{REPO}"."vig_demais_parametros"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}';
    '''
    # print(sql)

    # Execute
    with engine.connect() as conn:
        conn.execution_options(autocommit=True)
        query = conn.execute(text(sql), {
            'id_ibge': id_ibge,
            'forma_abastecimento_tipo': forma_abastecimento_tipo
        })

    # Dataframe
    df = pd.DataFrame(query.fetchall())
    # print(df.head())

    return [
        {
            'label': row['forma_abastecimento_nome'],
            'value': row['forma_abastecimento_nome']
        } for i, row in df.iterrows()
    ]


@app.callback(
    Output(component_id='id_vig_other_data_json', component_property='data'),
    Input(component_id='id_municipio', component_property='value'),
    Input(component_id='id_cad_tipo_abastecimento', component_property='value'),
    Input(component_id='id_vig_other_forma_abastecimento', component_property='value'),
    Input(component_id='id_vig_other_param', component_property='value'),
    prevent_initial_call=True
)
def vig_other_get_amostras(
        id_ibge,
        forma_abastecimento_tipo,
        forma_abastecimento_nome,
        parametro,
):
    if forma_abastecimento_nome is None or parametro is None:
        # PreventUpdate prevents ALL outputs updating
        raise dash.exceptions.PreventUpdate

    # Tabela
    # dict_row = df_param_basic_vig[df_param_basic_vig['parametro_campo'] == parametro].to_dict('records')[0]
    # TABLE = dict_row['tabela_db']

    # Query
    sql = f'''
        SELECT * FROM "{USERNAME}/{REPO}"."vig_demais_parametros"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}'
        AND "forma_abastecimento_nome" = '{forma_abastecimento_nome}';
    '''
    # print(sql)

    # Execute
    with engine.connect() as conn:
        conn.execution_options(autocommit=True)
        query = conn.execute(text(sql), {
            'id_ibge': id_ibge,
            'forma_abastecimento_tipo': forma_abastecimento_tipo,
            'forma_abastecimento_nome': forma_abastecimento_nome,
        })

    # Dataframe
    df = pd.DataFrame(query.fetchall())
    # print(df.head())
    return df.to_json(date_format='iso', orient='split')


@app.callback(
    Output(component_id='id_vig_other_graphic', component_property='figure'),
    Input(component_id='id_vig_other_data_json', component_property='data'),
    Input(component_id='id_vig_other_forma_abastecimento', component_property='value'),
    Input(component_id='id_vig_other_param', component_property='value'),
)
def vig_other_get_graph(
        datajson,
        forma_abastecimento_nome,
        parametro
):
    """

    :param datajson:
    :param forma_abastecimento_nome:
    :param parametro:
    :return:
    :rtype: object
    """
    # Prevent Update prevents ALL outputs updating
    if forma_abastecimento_nome is None or parametro is None:
        raise dash.exceptions.PreventUpdate

    df = pd.read_json(datajson, orient='split')
    print(df[['parametro', 'resultado']].head())
    if len(df) == 0:
        return graph_no_data(
            parametro=parametro,
            forma_abastecimento_nome=forma_abastecimento_nome,
        )

    else:
        return graph_vig_basic(
            x=df['data_coleta'],
            y=df['resultado'],
            parametro=parametro,
            forma_abastecimento_nome=forma_abastecimento_nome,
        )


@app.callback(
    Output(component_id='id_con_basic_param', component_property='options'),
    Input(component_id='id_municipio', component_property='value'),
    prevent_initial_call=True
)
def con_basic_get_param(id_ibge):
    """
    Busca parâmetros do Controle com base na tabela do python
    :param id_ibge:
    :return:
    :rtype: object
    """
    print('con_basic_get_param')
    return [
        {
            'label': f'{row["parametro_descricao"]} ({row["unidade"]})',
            'value': row['parametro_campo']
        } for i, row in df_con_basic_param.iterrows()
    ]


@app.callback(
    Output(component_id='id_con_basic_forma_abastecimento', component_property='options'),
    State(component_id='id_municipio', component_property='value'),
    Input(component_id='id_cad_tipo_abastecimento', component_property='value'),
    prevent_initial_call=True,
)
def con_basic_get_forma_abastecimento_nome(id_ibge, forma_abastecimento_tipo):
    """

    :param id_ibge:
    :return:
    :rtype: object
    """

    # Prevent Update prevents ALL outputs updating
    if id_ibge is None or forma_abastecimento_tipo is None:
        raise dash.exceptions.PreventUpdate


    # Query
    # TODO: Ajuster query adicionando tabelas
    sql = f'''
        SELECT "forma_abastecimento_nome" FROM "{USERNAME}/{REPO}"."con_basics_cloro_livre"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}'
        UNION
        SELECT "forma_abastecimento_nome" FROM "{USERNAME}/{REPO}"."con_basics_bacterias"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}'        
        UNION
        SELECT "forma_abastecimento_nome" FROM "{USERNAME}/{REPO}"."con_basics_cloro_combinado"
        WHERE "id_ibge" = {id_ibge}
        AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}';
    '''
    # print(sql)

    # Execute
    with engine.connect() as conn:
        conn.execution_options(autocommit=True)
        query = conn.execute(text(sql), {
            'id_ibge': id_ibge,
            'forma_abastecimento_tipo': forma_abastecimento_tipo})

    # Dataframe
    df = pd.DataFrame(query.fetchall())
    # print(df.head())

    return [
        {
            'label': row['forma_abastecimento_nome'],
            'value': row['forma_abastecimento_nome']
        } for i, row in df.iterrows()
    ]


@app.callback(
    Output(component_id='id_con_basic_data_json', component_property='data'),
    Input(component_id='id_municipio', component_property='value'),
    Input(component_id='id_cad_tipo_abastecimento', component_property='value'),
    Input(component_id='id_con_basic_forma_abastecimento', component_property='value'),
    Input(component_id='id_con_basic_param', component_property='value'),
    prevent_initial_call=True
)
def con_basic_get_amostras(
        id_ibge,
        forma_abastecimento_tipo,
        forma_abastecimento_nome,
        parametro,

):
    # Prevent Update prevents ALL outputs updating
    if \
            (id_ibge is None) or \
            (forma_abastecimento_tipo is None) or \
            (forma_abastecimento_nome is None) or \
            (parametro is None):
        raise dash.exceptions.PreventUpdate

    # Tabela
    dict_row = df_con_basic_param[df_con_basic_param['parametro_campo'] == parametro].to_dict('records')[0]
    TABLE = dict_row['tabela_db']

    # Query
    sql = f'''
                SELECT * FROM "{USERNAME}/{REPO}"."{TABLE}"
                WHERE "id_ibge" = {id_ibge}
                AND "forma_abastecimento_tipo" = '{forma_abastecimento_tipo}'
                AND "forma_abastecimento_nome" = '{forma_abastecimento_nome}';
            '''
    # print(sql)

    # Execute
    try:
        with engine.connect() as conn:
            conn.execution_options(autocommit=True)
            query = conn.execute(text(sql), {
                'id_ibge': id_ibge,
                'forma_abastecimento_tipo': forma_abastecimento_tipo,
                'forma_abastecimento_nome': forma_abastecimento_nome,
            })

        # Dataframe
        df = pd.DataFrame(query.fetchall())
    except Exception as e:
        print(e)
        df = pd.DataFrame()
    # print(df)
    return df.to_json(date_format='iso', orient='split')


@app.callback(
    Output(component_id='id_con_basic_graphic', component_property='figure'),
    Input(component_id='id_con_basic_data_json', component_property='data'),
    Input(component_id='id_con_basic_forma_abastecimento', component_property='value'),
    Input(component_id='id_con_basic_param', component_property='value'),
)
def con_basic_get_graph(datajson, forma_abastecimento_nome, parametro):
    # Prevent Update prevents ALL outputs updating
    if forma_abastecimento_nome is None or parametro is None:
        raise dash.exceptions.PreventUpdate

    # Read Parameters
    dict_row = df_con_basic_param[df_con_basic_param['parametro_campo'] == parametro].to_dict('records')[0]
    parametro_desc = f"{dict_row['parametro_descricao']} ({dict_row['unidade']})"

    # Read Dataframe
    try:
        df = pd.read_json(datajson, orient='split')
        print(df[['parametro', 'resultado']].head())
    except Exception as e:
        print(e)
        return graph_error_query(
            parametro=parametro,
            forma_abastecimento_nome=forma_abastecimento_nome,
        )

    if len(df) == 0:
        return graph_no_data(
            parametro=parametro,
            forma_abastecimento_nome=forma_abastecimento_nome,
        )

    else:
        # TODO: Ajustar gráfico com stack Ano e Mês
        return graph_vig_basic(
            x=df['mes_referencia'],
            y=df['resultado'],
            parametro=parametro_desc,
            forma_abastecimento_nome=forma_abastecimento_nome
        )
